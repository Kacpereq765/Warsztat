@page "/ViewCar"
@using MudBlazor
@using warsztat.Services
@inject NavigationManager NavigationManager
@inject ICarService carService
@using warsztat.Models

<h3>Samochody do naprawy</h3>

@if (cars == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else if (cars.Count == 0)
{
    <p>Brak samochodów do wyświetlenia.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Model</th>
                <th>Rocznik</th>
                <th>Czy zepsuty</th>
                <th>Cena naprawy</th>
                <th>Akcja</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in cars)
            {
                <tr>
                    <td>@car.Model</td>
                    <td>@car.Year</td>
                    <td>@(car.IsBroken ? "Tak" : "Nie")</td>
                    <td>@car.Price</td>
                    <td>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="() => DeleteCar(car.CarID)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<MudContainer>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToAddCar">
        Dodaj Samochód
    </MudButton>
</MudContainer>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@code {
    private List<Car> cars;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cars = await carService.GetCarsAsync() ?? new List<Car>();
        }
        catch (Exception ex)
        {
            errorMessage = "Wystąpił problem podczas pobierania samochodów: " + ex.Message;
            Console.WriteLine($"Błąd: {ex.Message}"); // Logowanie błędu
        }
    }

    private async Task DeleteCar(int carId)
    {
        try
        {
            await carService.DeleteCarAsync(carId);  // Wywołanie metody do usunięcia samochodu
            cars = await carService.GetCarsAsync();  // Odświeżenie listy samochodów po usunięciu
        }
        catch (Exception ex)
        {
            errorMessage = "Wystąpił problem podczas usuwania samochodu: " + ex.Message;
            Console.WriteLine($"Błąd: {ex.Message}"); // Logowanie błędu
        }
    }

    private void NavigateToAddCar()
    {
        NavigationManager.NavigateTo("/AddCar");
    }
}

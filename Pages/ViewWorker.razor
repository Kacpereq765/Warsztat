@page "/ViewWorker"
@using MudBlazor
@using warsztat.Services
@inject NavigationManager NavigationManager
@inject IWorkerService workerService
@using warsztat.Models

<h3>Pracownicy</h3>

@if (workers == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else if (workers.Count == 0)
{
    <p>Brak pracowników.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Imię</th>
                <th>Nazwisko</th>
                <th>Wiek</th>
                <th>Adres zamieszkania</th>
                <th>Stanowisko</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var worker in workers)
            {
                <tr>
                    <td>@worker.FirstName</td>
                    <td>@worker.LastName</td>
                    <td>@worker.Age</td>
                    <td>@worker.Address</td>
                    <td>@worker.Position</td>
                </tr>
            }
        </tbody>
    </table>
}

<MudContainer>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToAddWorker">
        Dodaj Pracownika
    </MudButton>
</MudContainer>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@code {
    private List<Worker> workers;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            workers = await workerService.GetWorkersAsync() ?? new List<Worker>();
        }
        catch (Exception ex)
        {
            errorMessage = "Wystąpił problem podczas pobierania pracowników: " + ex.Message;
            Console.WriteLine($"Błąd: {ex.Message}"); // Logowanie błędu
        }
    }

    private void NavigateToAddWorker()
    {
        NavigationManager.NavigateTo("/AddWorker");
    }
}

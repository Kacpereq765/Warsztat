@page "/ViewWorkshop"
@using MudBlazor
@using warsztat.Models
@using warsztat.Services
@inject NavigationManager NavigationManager
@inject IWorkshopService WorkshopService

<h3>Warsztaty</h3>

@if (workshops == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else if (workshops.Count == 0)
{
    <p>Brak warsztatów.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nazwa</th>
                <th>Opis</th>
                <th>Lokalizacja</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var workshop in workshops)
            {
                <tr>
                    <td>@workshop.NameWorkshop</td>
                    <td>@workshop.Description</td>
                    <td>@workshop.Location</td>
                    <td><MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="() => DeleteWorkshop(workshop.WorkshopID)" /></td>
                </tr>
            }
        </tbody>
    </table>
}

<MudContainer>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToAddWorkshop">
        Dodaj Warsztat
    </MudButton>
</MudContainer>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@code {
    private List<Workshop> workshops;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkshops();  // Ładowanie warsztatów przy inicjalizacji
    }

    private async Task LoadWorkshops()
    {
        try
        {
            workshops = await WorkshopService.GetWorkshopsAsync() ?? new List<Workshop>();
        }
        catch (Exception ex)
        {
            errorMessage = "Wystąpił problem podczas pobierania warsztatów: " + ex.Message;
            Console.WriteLine($"Błąd: {ex.Message}"); // Logowanie błędu
        }
    }

    private async Task DeleteWorkshop(int workshopId)
    {
        try
        {
            await WorkshopService.DeleteWorkshopAsync(workshopId);  // Usunięcie warsztatu
            await LoadWorkshops();  // Odświeżenie listy warsztatów po usunięciu
        }
        catch (Exception ex)
        {
            errorMessage = "Wystąpił problem podczas usuwania warsztatu: " + ex.Message;
            Console.WriteLine($"Błąd: {ex.Message}");
        }
    }

    private void NavigateToAddWorkshop()
    {
        NavigationManager.NavigateTo("/AddWorkshop");
    }
}
